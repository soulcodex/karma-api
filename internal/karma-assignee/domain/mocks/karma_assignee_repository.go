// Code generated by mockery v2.51.0. DO NOT EDIT.

package karma_assignee_mocks

import (
	context "context"

	karma_assignee_domain "github.com/soulcodex/karma-api/internal/karma-assignee/domain"
	mock "github.com/stretchr/testify/mock"
)

// KarmaAssigneeRepositoryMock is an autogenerated mock type for the KarmaAssigneeRepository type
type KarmaAssigneeRepositoryMock struct {
	mock.Mock
}

// FindByUsernameAndAssigner provides a mock function with given fields: ctx, username, assigner
func (_m *KarmaAssigneeRepositoryMock) FindByUsernameAndAssigner(ctx context.Context, username karma_assignee_domain.Username, assigner karma_assignee_domain.Username) (*karma_assignee_domain.KarmaAssignee, error) {
	ret := _m.Called(ctx, username, assigner)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsernameAndAssigner")
	}

	var r0 *karma_assignee_domain.KarmaAssignee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, karma_assignee_domain.Username, karma_assignee_domain.Username) (*karma_assignee_domain.KarmaAssignee, error)); ok {
		return rf(ctx, username, assigner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, karma_assignee_domain.Username, karma_assignee_domain.Username) *karma_assignee_domain.KarmaAssignee); ok {
		r0 = rf(ctx, username, assigner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*karma_assignee_domain.KarmaAssignee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, karma_assignee_domain.Username, karma_assignee_domain.Username) error); ok {
		r1 = rf(ctx, username, assigner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, ka
func (_m *KarmaAssigneeRepositoryMock) Save(ctx context.Context, ka *karma_assignee_domain.KarmaAssignee) error {
	ret := _m.Called(ctx, ka)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *karma_assignee_domain.KarmaAssignee) error); ok {
		r0 = rf(ctx, ka)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKarmaAssigneeRepositoryMock creates a new instance of KarmaAssigneeRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKarmaAssigneeRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *KarmaAssigneeRepositoryMock {
	mock := &KarmaAssigneeRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
